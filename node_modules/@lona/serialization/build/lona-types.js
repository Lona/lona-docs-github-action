"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const json = __importStar(require("./convert/json/types"));
const lona_format_1 = require("./lona-format");
function decodeTypes(contents, format) {
    const sourceFormat = lona_format_1.normalizeFormat(contents, format);
    try {
        switch (sourceFormat) {
            case lona_format_1.SERIALIZATION_FORMAT.JSON:
                return json.parse(contents);
            default:
                throw new Error(`Unknown decoding format ${sourceFormat}`);
        }
    }
    catch (e) {
        console.error(e);
        throw new Error(`Failed to decode types as ${sourceFormat}.\n\n${e}`);
    }
}
exports.decodeTypes = decodeTypes;
function encodeTypes(ast, format) {
    try {
        switch (format) {
            case lona_format_1.SERIALIZATION_FORMAT.JSON:
                return json.print(ast);
            default:
                throw new Error(`Unknown encoding format ${format}`);
        }
    }
    catch (e) {
        console.error(e);
        throw new Error(`Failed to encode types as ${format}.\n\n${e}`);
    }
}
exports.encodeTypes = encodeTypes;
function convertTypes(contents, targetFormat, options = {}) {
    const sourceFormat = lona_format_1.normalizeFormat(contents, options.sourceFormat);
    if (sourceFormat === targetFormat)
        return contents;
    const ast = decodeTypes(contents, sourceFormat);
    return encodeTypes(ast, targetFormat);
}
exports.convertTypes = convertTypes;
