#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const yargs_1 = __importDefault(require("yargs"));
const index_1 = require("./index");
function addSharedArguments(cli) {
    cli.positional('file', {
        type: 'string',
        describe: 'The file to convert',
    });
    cli.positional('targetFormat', {
        type: 'string',
        describe: 'The target format',
    });
}
function getFormat(format) {
    if (typeof format !== 'string') {
        throw new Error('targetFormat needs to be a string');
    }
    if (format.toLowerCase() === 'json') {
        return index_1.SERIALIZATION_FORMAT.JSON;
    }
    if (format.toLowerCase() === 'source' || format.toLowerCase() === 'swift') {
        return index_1.SERIALIZATION_FORMAT.SOURCE;
    }
    throw new Error('unknown serialization format');
}
yargs_1.default
    .scriptName('@lona/serialization')
    .usage('Usage: @lona/serialization <command> [options]')
    .command('document file targetFormat', 'Convert a Lona document to the specified format', cli => {
    addSharedArguments(cli);
    cli.option('e', {
        alias: 'embeddedFormat',
        describe: 'The format of token blocks in MDX',
        type: 'string',
    });
}, argv => {
    const { file, targetFormat, embeddedFormat } = argv;
    if (typeof file !== 'string') {
        throw new Error('file needs to be a string');
    }
    const contents = fs_1.default.readFileSync(file, 'utf8');
    const converted = index_1.convertDocument(contents, getFormat(targetFormat), {
        embeddedFormat: embeddedFormat ? getFormat(embeddedFormat) : undefined,
    });
    console.log(converted);
})
    .command('logic file targetFormat', 'Convert a Lona logic (tokens) file to the specified format', cli => addSharedArguments(cli), argv => {
    const { file, targetFormat } = argv;
    if (typeof file !== 'string') {
        throw new Error('file needs to be a string');
    }
    const contents = fs_1.default.readFileSync(file, 'utf8');
    const converted = index_1.convertLogic(contents, getFormat(targetFormat));
    console.log(converted);
})
    .command('types file targetFormat', 'Convert a Lona types file to the specified format', cli => addSharedArguments(cli), argv => {
    const { file, targetFormat } = argv;
    if (typeof file !== 'string') {
        throw new Error('file needs to be a string');
    }
    const contents = fs_1.default.readFileSync(file, 'utf8');
    const converted = index_1.convertTypes(contents, getFormat(targetFormat));
    console.log(converted);
})
    .command('program file', 'Extract the executable contents of a Lona document', () => { }, argv => {
    const { file } = argv;
    if (typeof file !== 'string') {
        throw new Error('file needs to be a string');
    }
    const contents = fs_1.default.readFileSync(file, 'utf8');
    const converted = index_1.extractProgram(contents);
    console.log(converted);
})
    .demandCommand(1, 'Pass --help to see all available commands and options.')
    .strict()
    .fail(msg => {
    yargs_1.default.showHelp();
    console.log('\n' + msg);
})
    .help('h')
    .alias('h', 'help').argv;
