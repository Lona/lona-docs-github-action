import * as mdx from './mdx';
import { SERIALIZATION_FORMAT, detectFormat } from './lona-format';
import { convertLogic, decodeLogic, encodeLogic } from './lona-logic';
import { convertTypes, decodeTypes, encodeTypes } from './lona-types';
import * as MDXAST from './types/lona-ast';
import * as LogicAST from './types/logic-ast';
import * as TypesAST from './types/types-ast';
declare function decodeDocument(contents: string, format?: SERIALIZATION_FORMAT, filePath?: string): {
    children: MDXAST.Content[];
};
declare function encodeDocument(ast: {
    children: MDXAST.Content[];
}, format: SERIALIZATION_FORMAT, options?: {
    sourceFormat?: SERIALIZATION_FORMAT;
    embeddedFormat?: SERIALIZATION_FORMAT;
}): string;
declare function convertDocument(contents: string, targetFormat: SERIALIZATION_FORMAT, options?: {
    sourceFormat?: SERIALIZATION_FORMAT;
    embeddedFormat?: SERIALIZATION_FORMAT;
    filePath?: string;
}): string;
declare function extractProgramFromAST(ast: {
    children: MDXAST.Content[];
}): LogicAST.TopLevelDeclarations;
declare function extractProgram(contents: string, options?: {
    sourceFormat?: SERIALIZATION_FORMAT;
}): string;
declare const printMdxNode: typeof mdx.printNode;
export { MDXAST, LogicAST, TypesAST, SERIALIZATION_FORMAT, convertTypes, convertLogic, convertDocument, decodeTypes, decodeLogic, decodeDocument, encodeTypes, encodeLogic, encodeDocument, extractProgram, detectFormat, printMdxNode, extractProgramFromAST, };
