"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const json = __importStar(require("./convert/json/logic"));
const swift = __importStar(require("./convert/swift/logic"));
const lona_format_1 = require("./lona-format");
const utils_1 = require("./utils");
function decodeLogic(contents, format, options = {}) {
    const sourceFormat = lona_format_1.normalizeFormat(contents, format);
    try {
        switch (sourceFormat) {
            case lona_format_1.SERIALIZATION_FORMAT.JSON:
                return json.parse(contents);
            case lona_format_1.SERIALIZATION_FORMAT.SOURCE:
                return swift.parse(contents);
            default:
                throw new Error(`Unknown decoding format ${sourceFormat}`);
        }
    }
    catch (e) {
        if (e.name === 'SyntaxError' && e.location) {
            // that's a pegjs error, let's format it nicely
            throw utils_1.parsingError(contents, e, options);
        }
        throw new Error(`Failed to decode logic as ${sourceFormat}.\n\n${e}`);
    }
}
exports.decodeLogic = decodeLogic;
function encodeLogic(ast, format) {
    try {
        switch (format) {
            case lona_format_1.SERIALIZATION_FORMAT.JSON:
                return json.print(ast);
            case lona_format_1.SERIALIZATION_FORMAT.SOURCE:
                return swift.print(ast);
            default:
                throw new Error(`Unknown encoding format ${format}`);
        }
    }
    catch (e) {
        console.error(e);
        throw new Error(`Failed to encode logic as ${format}.\n\n${e}`);
    }
}
exports.encodeLogic = encodeLogic;
function convertLogic(contents, targetFormat, options = {}) {
    const sourceFormat = lona_format_1.normalizeFormat(contents, options.sourceFormat);
    if (sourceFormat === targetFormat)
        return contents;
    const ast = decodeLogic(contents, sourceFormat, options);
    return encodeLogic(ast, targetFormat);
}
exports.convertLogic = convertLogic;
