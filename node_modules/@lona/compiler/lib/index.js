"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
const fs = __importStar(require("fs"));
const utils_1 = require("./utils");
const helpers_1 = __importDefault(require("./helpers"));
exports.getConfig = (workspacePath) => __awaiter(void 0, void 0, void 0, function* () {
    const resolvedPath = path.resolve(workspacePath);
    if (!(yield utils_1.isWorkspacePath(resolvedPath))) {
        throw new Error('The path provided is not a Lona Workspace. A workspace must contain a `lona.json` file.');
    }
    return yield utils_1.config.load(resolvedPath);
});
exports.convertFile = (filePath, formatter, options) => __awaiter(void 0, void 0, void 0, function* () {
    const workspace = yield utils_1.findWorkspace(filePath);
    if (!workspace) {
        throw new Error('The path provided is not part of a Lona Workspace. A workspace must contain a `lona.json` file.');
    }
    const helpers = yield helpers_1.default(workspace);
    return formatter.parseFile(path.relative(workspace, filePath), helpers, Object.assign(Object.assign({}, ((helpers.config.format || {})[formatter.format] || {})), (options || {})));
});
exports.convertWorkspace = (workspacePath, outputPath, formatter, options) => __awaiter(void 0, void 0, void 0, function* () {
    const helpers = yield helpers_1.default(workspacePath, outputPath);
    return formatter.parseWorkspace(workspacePath, helpers, Object.assign(Object.assign({}, ((helpers.config.format || {})[formatter.format] || {})), (options || {})));
});
exports.convert = (fileOrWorkspacePath, format, options) => __awaiter(void 0, void 0, void 0, function* () {
    const resolvedPath = path.resolve(fileOrWorkspacePath);
    const formatter = utils_1.findPlugin(format);
    if (yield utils_1.isWorkspacePath(resolvedPath)) {
        return exports.convertWorkspace(resolvedPath, (options || {}).output, formatter, options);
    }
    else if (!fs.statSync(resolvedPath).isDirectory) {
        return exports.convertFile(resolvedPath, formatter, options);
    }
    else {
        throw new Error('The path provided is not a Lona Workspace. A workspace must contain a `lona.json` file.');
    }
});
