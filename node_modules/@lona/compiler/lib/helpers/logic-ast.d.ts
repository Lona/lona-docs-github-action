import { LogicAST } from '@lona/serialization';
export { LogicAST as AST };
/**
 * Takes an array of programs and returns a program containing
 * the statements of all programs
 */
export declare function joinPrograms(programs: (LogicAST.Program | void)[]): LogicAST.Program;
/** tries to make a program out of any Logic node */
export declare function makeProgram(node: LogicAST.SyntaxNode): LogicAST.Program | undefined;
export declare function getPattern(node: LogicAST.SyntaxNode): LogicAST.Pattern | void;
export declare function getIdentifier(node: LogicAST.SyntaxNode): LogicAST.Identifier | void;
export declare function flattenedMemberExpression(memberExpression: LogicAST.Expression): LogicAST.Identifier[] | void;
export declare function getNode(rootNode: LogicAST.SyntaxNode, id: string): LogicAST.SyntaxNode | undefined;
export declare function findNode(rootNode: LogicAST.SyntaxNode | LogicAST.Pattern | LogicAST.Identifier, id: string): LogicAST.Placeholder | LogicAST.Pattern | LogicAST.FunctionTypeTypeAnnotation | LogicAST.TypeIdentifierTypeAnnotation | {
    type: "enumerationCase";
    data: {
        id: string;
        name: LogicAST.Pattern;
        associatedValueTypes: LogicAST.TypeAnnotation[];
        comment?: LogicAST.Comment | undefined;
    };
} | LogicAST.AssignmentExpression | LogicAST.FunctionCallExpression | LogicAST.IdentifierExpression | LogicAST.LiteralExpression | LogicAST.MemberExpression | {
    type: "argument";
    data: {
        id: string;
        label?: string | undefined;
        expression: LogicAST.Expression;
    };
} | LogicAST.NoneFunctionParameterDefaultValue | LogicAST.ValueFunctionParameterDefaultValue | {
    type: "parameter";
    data: {
        id: string;
        localName: LogicAST.Pattern;
        annotation: LogicAST.TypeAnnotation;
        defaultValue: LogicAST.FunctionParameterDefaultValue;
        comment?: LogicAST.Comment | undefined;
    };
} | {
    type: "parameter";
    data: {
        id: string;
        name: LogicAST.Pattern;
    };
} | LogicAST.Identifier | LogicAST.BranchStatement | LogicAST.DeclarationStatement | LogicAST.ExpressionStatement | LogicAST.LoopStatement | LogicAST.ReturnStatement | LogicAST.Program | LogicAST.EnumerationDeclaration | LogicAST.FunctionDeclaration | LogicAST.ImportDeclaration | LogicAST.NamespaceDeclaration | LogicAST.RecordDeclaration | LogicAST.VariableDeclaration | LogicAST.TopLevelDeclarations | LogicAST.TopLevelParameters | LogicAST.BooleanLiteral | LogicAST.NumberLiteral | LogicAST.StringLiteral | LogicAST.ColorLiteral | LogicAST.ArrayLiteral | undefined;
export declare function findParentNode(node: LogicAST.SyntaxNode | LogicAST.Pattern | LogicAST.Identifier, id: string): LogicAST.Placeholder | LogicAST.FunctionTypeTypeAnnotation | LogicAST.TypeIdentifierTypeAnnotation | {
    type: "enumerationCase";
    data: {
        id: string;
        name: LogicAST.Pattern;
        associatedValueTypes: LogicAST.TypeAnnotation[];
        comment?: LogicAST.Comment | undefined;
    };
} | LogicAST.AssignmentExpression | LogicAST.FunctionCallExpression | LogicAST.IdentifierExpression | LogicAST.LiteralExpression | LogicAST.MemberExpression | {
    type: "argument";
    data: {
        id: string;
        label?: string | undefined;
        expression: LogicAST.Expression;
    };
} | LogicAST.NoneFunctionParameterDefaultValue | LogicAST.ValueFunctionParameterDefaultValue | {
    type: "parameter";
    data: {
        id: string;
        localName: LogicAST.Pattern;
        annotation: LogicAST.TypeAnnotation;
        defaultValue: LogicAST.FunctionParameterDefaultValue;
        comment?: LogicAST.Comment | undefined;
    };
} | {
    type: "parameter";
    data: {
        id: string;
        name: LogicAST.Pattern;
    };
} | LogicAST.BranchStatement | LogicAST.DeclarationStatement | LogicAST.ExpressionStatement | LogicAST.LoopStatement | LogicAST.ReturnStatement | LogicAST.Program | LogicAST.EnumerationDeclaration | LogicAST.FunctionDeclaration | LogicAST.ImportDeclaration | LogicAST.NamespaceDeclaration | LogicAST.RecordDeclaration | LogicAST.VariableDeclaration | LogicAST.TopLevelDeclarations | LogicAST.TopLevelParameters | LogicAST.BooleanLiteral | LogicAST.NumberLiteral | LogicAST.StringLiteral | LogicAST.ColorLiteral | LogicAST.ArrayLiteral | undefined;
export declare function declarationPathTo(node: LogicAST.SyntaxNode | LogicAST.Pattern | LogicAST.Identifier, id: string): string[];
