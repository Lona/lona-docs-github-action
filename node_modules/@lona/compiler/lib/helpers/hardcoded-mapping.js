"use strict";
// ⚠️ THIS FILE IS AUTO GENERATED. DO NOT MODIFY IT.
Object.defineProperty(exports, "__esModule", { value: true });
const logic_ast_1 = require("./logic-ast");
exports.isHardcodedMapCall = {
    functionCallExpression: (k, map) => {
        return k in map.functionCallExpression;
    },
    memberExpression: (k, map) => {
        return k in map.memberExpression;
    },
};
exports.createStandardLibraryResolver = (hardcodedMap) => (node, evaluationContext, ...args) => {
    if (!evaluationContext) {
        return undefined;
    }
    let matchedHardcodedNode;
    if (node.type === 'functionCallExpression') {
        let memberExpression = node.data.expression;
        if (!evaluationContext.isFromStandardLibrary(memberExpression.data.id)) {
            return;
        }
        const path = (logic_ast_1.flattenedMemberExpression(memberExpression) || [])
            .map(y => y.string)
            .join('.');
        if (exports.isHardcodedMapCall.functionCallExpression(path, hardcodedMap)) {
            matchedHardcodedNode = hardcodedMap.functionCallExpression[path](node, ...args);
        }
    }
    if (node.type === 'memberExpression') {
        let memberExpression = node;
        if (!evaluationContext.isFromStandardLibrary(memberExpression.data.id)) {
            return;
        }
        const path = (logic_ast_1.flattenedMemberExpression(memberExpression) || [])
            .map(y => y.string)
            .join('.');
        if (exports.isHardcodedMapCall.memberExpression(path, hardcodedMap)) {
            matchedHardcodedNode = hardcodedMap.memberExpression[path](node, ...args);
        }
    }
    return matchedHardcodedNode;
};
