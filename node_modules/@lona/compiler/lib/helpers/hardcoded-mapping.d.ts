import { AST as LogicAST } from './logic-ast';
import { EvaluationContext } from './logic-evaluate';
export declare type HardcodedMap<T, U extends any[]> = {
    functionCallExpression: {
        'Color.setHue': (node: LogicAST.FunctionCallExpression, ...args: U) => T | undefined;
        'Color.setSaturation': (node: LogicAST.FunctionCallExpression, ...args: U) => T | undefined;
        'Color.setLightness': (node: LogicAST.FunctionCallExpression, ...args: U) => T | undefined;
        'Color.fromHSL': (node: LogicAST.FunctionCallExpression, ...args: U) => T | undefined;
        'Color.saturate': (node: LogicAST.FunctionCallExpression, ...args: U) => T | undefined;
        'Boolean.or': (node: LogicAST.FunctionCallExpression, ...args: U) => T | undefined;
        'Boolean.and': (node: LogicAST.FunctionCallExpression, ...args: U) => T | undefined;
        'Number.range': (node: LogicAST.FunctionCallExpression, ...args: U) => T | undefined;
        'String.concat': (node: LogicAST.FunctionCallExpression, ...args: U) => T | undefined;
        'Array.at': (node: LogicAST.FunctionCallExpression, ...args: U) => T | undefined;
        'Optional.value': (node: LogicAST.FunctionCallExpression, ...args: U) => T | undefined;
        'Optional.none': (node: LogicAST.FunctionCallExpression, ...args: U) => T | undefined;
        'Shadow': (node: LogicAST.FunctionCallExpression, ...args: U) => T | undefined;
        'FontWeight.ultraLight': (node: LogicAST.FunctionCallExpression, ...args: U) => T | undefined;
        'FontWeight.thin': (node: LogicAST.FunctionCallExpression, ...args: U) => T | undefined;
        'FontWeight.light': (node: LogicAST.FunctionCallExpression, ...args: U) => T | undefined;
        'FontWeight.regular': (node: LogicAST.FunctionCallExpression, ...args: U) => T | undefined;
        'FontWeight.medium': (node: LogicAST.FunctionCallExpression, ...args: U) => T | undefined;
        'FontWeight.semibold': (node: LogicAST.FunctionCallExpression, ...args: U) => T | undefined;
        'FontWeight.bold': (node: LogicAST.FunctionCallExpression, ...args: U) => T | undefined;
        'FontWeight.heavy': (node: LogicAST.FunctionCallExpression, ...args: U) => T | undefined;
        'FontWeight.black': (node: LogicAST.FunctionCallExpression, ...args: U) => T | undefined;
        'TextStyle': (node: LogicAST.FunctionCallExpression, ...args: U) => T | undefined;
    };
    memberExpression: {
        'FontWeight.w100': (node: LogicAST.MemberExpression, ...args: U) => T | undefined;
        'FontWeight.w200': (node: LogicAST.MemberExpression, ...args: U) => T | undefined;
        'FontWeight.w300': (node: LogicAST.MemberExpression, ...args: U) => T | undefined;
        'FontWeight.w400': (node: LogicAST.MemberExpression, ...args: U) => T | undefined;
        'FontWeight.w500': (node: LogicAST.MemberExpression, ...args: U) => T | undefined;
        'FontWeight.w600': (node: LogicAST.MemberExpression, ...args: U) => T | undefined;
        'FontWeight.w700': (node: LogicAST.MemberExpression, ...args: U) => T | undefined;
        'FontWeight.w800': (node: LogicAST.MemberExpression, ...args: U) => T | undefined;
        'FontWeight.w900': (node: LogicAST.MemberExpression, ...args: U) => T | undefined;
    };
};
export declare const isHardcodedMapCall: {
    functionCallExpression: <T, U extends any[]>(k: string, map: HardcodedMap<T, U>) => k is "Shadow" | "TextStyle" | "Color.setHue" | "Color.setSaturation" | "Color.setLightness" | "Color.fromHSL" | "Color.saturate" | "Boolean.or" | "Boolean.and" | "Number.range" | "String.concat" | "Array.at" | "Optional.value" | "Optional.none" | "FontWeight.ultraLight" | "FontWeight.thin" | "FontWeight.light" | "FontWeight.regular" | "FontWeight.medium" | "FontWeight.semibold" | "FontWeight.bold" | "FontWeight.heavy" | "FontWeight.black";
    memberExpression: <T_1, U_1 extends any[]>(k: string, map: HardcodedMap<T_1, U_1>) => k is "FontWeight.w100" | "FontWeight.w200" | "FontWeight.w300" | "FontWeight.w400" | "FontWeight.w500" | "FontWeight.w600" | "FontWeight.w700" | "FontWeight.w800" | "FontWeight.w900";
};
export declare const createStandardLibraryResolver: <T, U extends any[]>(hardcodedMap: HardcodedMap<T, U>) => (node: LogicAST.SyntaxNode, evaluationContext: EvaluationContext | undefined, ...args: U) => T | undefined;
