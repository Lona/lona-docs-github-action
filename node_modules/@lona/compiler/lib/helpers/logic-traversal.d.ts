import * as LogicAST from './logic-ast';
declare enum TraversalOrder {
    PreOrder = "PreOrder",
    PostOrder = "PostOrder"
}
export declare type TraversalConfig = {
    order: TraversalOrder;
    ignoreChildren: boolean;
    stopTraversal: boolean;
    needsRevisitAfterTraversingChildren: boolean;
    _isRevisit: boolean;
};
export declare let emptyConfig: () => TraversalConfig;
/**
 * The `reduce()` method executes a reducer function (that you provide) on each node of the AST, resulting in a single output value.
 * Your reducer function's returned value is assigned to the accumulator, whose value is remembered across each iteration throughout the AST, and ultimately becomes the final, single resulting value.
 * The traversal is depth-first, you can specify whether it should be pre-order or post-order in the config.
 */
export declare const reduce: <T>(node: LogicAST.AST.SyntaxNode, callbackfn: (previousValue: T, currentNode: LogicAST.AST.SyntaxNode, config: TraversalConfig) => T, initialResult: T, config?: TraversalConfig) => T;
export {};
