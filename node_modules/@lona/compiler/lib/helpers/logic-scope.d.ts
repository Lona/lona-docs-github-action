import * as LogicAST from './logic-ast';
import { Reporter } from './reporter';
import { ShallowMap } from '../utils/shallow-map';
declare class ScopeStack<K extends string, V> {
    private scopes;
    get(k: K): V | void;
    set(k: K, v: V): void;
    push(): void;
    pop(): {
        [key: string]: V;
    };
    flattened(): {
        [key: string]: V;
    };
    copy(): ScopeStack<K, V>;
}
export declare type ScopeContext = {
    identifierToPattern: {
        [key: string]: {
            pattern: string;
            in: string;
        };
    };
    patternToIdentifier: {
        [key: string]: {
            identifier: string;
            in: string;
        };
    };
    _patternToName: {
        [key: string]: string;
    };
    _patternToTypeName: {
        [key: string]: string;
    };
    _patternNames: ScopeStack<string, {
        value: string;
        from: string;
    }>;
    _namespace: ShallowMap<string[], {
        value: string;
        from: string;
    }>;
    _currentNamespacePath: string[];
    _currentScopeName?: string;
};
export declare const build: (rootNodes: {
    node: LogicAST.AST.SyntaxNode;
    in: string;
}[], reporter: Reporter, initialContext?: ScopeContext) => ScopeContext;
export {};
