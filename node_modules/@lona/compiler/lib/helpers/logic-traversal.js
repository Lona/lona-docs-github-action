"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const LogicAST = __importStar(require("./logic-ast"));
var TraversalOrder;
(function (TraversalOrder) {
    TraversalOrder["PreOrder"] = "PreOrder";
    TraversalOrder["PostOrder"] = "PostOrder";
})(TraversalOrder || (TraversalOrder = {}));
exports.emptyConfig = () => ({
    order: TraversalOrder.PreOrder,
    ignoreChildren: false,
    stopTraversal: false,
    needsRevisitAfterTraversingChildren: false,
    _isRevisit: false,
});
function reduceChildren(node, callbackfn, initialResult, config) {
    return LogicAST.AST.subNodes(node).reduce((prev, x) => {
        if (config.stopTraversal) {
            return prev;
        }
        return exports.reduce(x, callbackfn, prev, config);
    }, initialResult);
}
/**
 * The `reduce()` method executes a reducer function (that you provide) on each node of the AST, resulting in a single output value.
 * Your reducer function's returned value is assigned to the accumulator, whose value is remembered across each iteration throughout the AST, and ultimately becomes the final, single resulting value.
 * The traversal is depth-first, you can specify whether it should be pre-order or post-order in the config.
 */
exports.reduce = (node, callbackfn, initialResult, config = exports.emptyConfig()) => {
    if (config.stopTraversal) {
        return initialResult;
    }
    if (config.order === TraversalOrder.PostOrder) {
        const result = reduceChildren(node, callbackfn, initialResult, config);
        if (config.stopTraversal) {
            return result;
        }
        return callbackfn(result, node, config);
    }
    else {
        let result = callbackfn(initialResult, node, config);
        const shouldRevisit = config.needsRevisitAfterTraversingChildren;
        if (config.ignoreChildren) {
            config.ignoreChildren = false;
        }
        else {
            result = reduceChildren(node, callbackfn, result, config);
        }
        if (!config.stopTraversal && shouldRevisit) {
            config._isRevisit = true;
            result = callbackfn(result, node, config);
            config._isRevisit = false;
            config.ignoreChildren = false;
        }
        return result;
    }
};
