import * as LogicAST from './logic-ast';
import * as LogicScope from './logic-scope';
import { Reporter } from './reporter';
import { ShallowMap } from '../utils';
declare type FunctionArgument = {
    label?: string;
    type: Unification;
};
declare type Variable = {
    type: 'variable';
    value: string;
};
declare type Constant = {
    type: 'constant';
    name: string;
    parameters: Unification[];
};
declare type Generic = {
    type: 'generic';
    name: string;
};
declare type Function = {
    type: 'function';
    arguments: FunctionArgument[];
    returnType: Unification;
};
export declare type Unification = Variable | Constant | Generic | Function;
export declare const unit: Constant;
export declare const bool: Constant;
export declare const number: Constant;
export declare const string: Constant;
export declare const color: Constant;
export declare const shadow: Constant;
export declare const textStyle: Constant;
export declare const optional: (type: Unification) => Constant;
export declare const array: (typeUnification: Unification) => Constant;
declare type Contraint = {
    head: Unification;
    tail: Unification;
};
declare class LogicNameGenerator {
    private prefix;
    private currentIndex;
    constructor(prefix?: string);
    next(): string;
}
export declare type UnificationContext = {
    constraints: Contraint[];
    nodes: {
        [key: string]: Unification;
    };
    patternTypes: {
        [key: string]: Unification;
    };
    typeNameGenerator: LogicNameGenerator;
};
export declare function substitute(substitution: ShallowMap<Unification, Unification>, type: Unification): Unification;
export declare const makeUnificationContext: (rootNode: LogicAST.AST.SyntaxNode, scopeContext: LogicScope.ScopeContext, reporter: Reporter, initialContext?: UnificationContext) => UnificationContext;
export declare const unify: (constraints: Contraint[], reporter: Reporter, substitution?: ShallowMap<Unification, Unification>) => ShallowMap<Unification, Unification>;
export {};
