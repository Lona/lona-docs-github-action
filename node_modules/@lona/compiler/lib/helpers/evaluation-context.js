"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const LogicAST = __importStar(require("./logic-ast"));
const LogicScope = __importStar(require("./logic-scope"));
const LogicUnify = __importStar(require("./logic-unify"));
const LogicEvaluate = __importStar(require("./logic-evaluate"));
const utils_1 = require("../utils");
exports.generate = (config, reporter) => {
    const standardLibsPath = path.join(__dirname, '../../static/logic');
    const standardLibs = fs.readdirSync(standardLibsPath);
    const libraryFiles = standardLibs.map(x => LogicAST.makeProgram(JSON.parse(fs.readFileSync(path.join(standardLibsPath, x), 'utf8'))));
    const standardLibsProgram = LogicAST.joinPrograms(libraryFiles);
    const logicPrograms = Object.keys(config.logicFiles)
        .map(k => {
        const node = LogicAST.makeProgram(config.logicFiles[k]);
        if (!node) {
            return undefined;
        }
        return {
            in: k,
            node,
        };
    })
        .filter(utils_1.nonNullable);
    const scopeContext = LogicScope.build([{ node: standardLibsProgram, in: 'standard library' }].concat(logicPrograms), reporter);
    const programNode = LogicAST.joinPrograms([
        standardLibsProgram,
        ...logicPrograms.map(x => x.node),
    ]);
    const unificationContext = LogicUnify.makeUnificationContext(programNode, scopeContext, reporter);
    const substitution = LogicUnify.unify(unificationContext.constraints, reporter);
    const evaluationContext = LogicEvaluate.evaluate(programNode, programNode, scopeContext, unificationContext, substitution, reporter);
    return evaluationContext;
};
