"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
exports.createFSWrapper = (workspacePath, _outputPath) => {
    const outputPath = typeof _outputPath === 'string'
        ? _outputPath
        : path.join(process.cwd(), 'lona-generated');
    const fsWrapper = {
        readFile(filePath) {
            return fs.promises.readFile(path.resolve(workspacePath, filePath), 'utf-8');
        },
        writeFile(filePath, data) {
            const resolvedPath = path.resolve(outputPath, filePath);
            fs.mkdirSync(path.dirname(resolvedPath), { recursive: true });
            return fs.promises.writeFile(resolvedPath, data, 'utf-8');
        },
        copyDir(dirPath, output = '.') {
            return __awaiter(this, void 0, void 0, function* () {
                const resolvedPath = path.resolve(workspacePath, dirPath);
                const files = yield fs.promises.readdir(resolvedPath);
                yield Promise.all(files.map((x) => __awaiter(this, void 0, void 0, function* () {
                    if ((yield fs.promises.stat(path.join(resolvedPath, x))).isDirectory()) {
                        return;
                    }
                    return fsWrapper.writeFile(path.join(output, x), yield fsWrapper.readFile(path.join(dirPath, x)));
                })));
            });
        },
    };
    return fsWrapper;
};
