"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils");
const evaluation_context_1 = require("./evaluation-context");
const hardcoded_mapping_1 = require("./hardcoded-mapping");
const reporter_1 = require("./reporter");
const fs_1 = require("./fs");
var logic_evaluate_1 = require("./logic-evaluate");
exports.EvaluationContext = logic_evaluate_1.EvaluationContext;
const logic_traversal_1 = require("./logic-traversal");
const logic_ast_1 = require("./logic-ast");
exports.default = (workspacePath, outputPath, _reporter) => __awaiter(void 0, void 0, void 0, function* () {
    const fsWrapper = fs_1.createFSWrapper(workspacePath, outputPath);
    const config = yield utils_1.config.load(workspacePath, {
        forEvaluation: true,
        fs: fsWrapper,
    });
    let cachedEvaluationContext;
    const reporter = _reporter || reporter_1.defaultReporter;
    return {
        fs: fsWrapper,
        config,
        get evaluationContext() {
            if (cachedEvaluationContext) {
                return cachedEvaluationContext;
            }
            cachedEvaluationContext = evaluation_context_1.generate(config, reporter);
            return cachedEvaluationContext;
        },
        createStandardLibraryResolver: hardcoded_mapping_1.createStandardLibraryResolver,
        reporter,
        ast: {
            makeProgram: logic_ast_1.makeProgram,
            traversal: {
                declarationPathTo: logic_ast_1.declarationPathTo,
                findNode: logic_ast_1.findNode,
                findParentNode: logic_ast_1.findParentNode,
                reduce: logic_traversal_1.reduce,
            },
        },
    };
});
