export declare enum binaryOperator {
    Eq = 0,
    LooseEq = 1,
    Neq = 2,
    LooseNeq = 3,
    Gt = 4,
    Gte = 5,
    Lt = 6,
    Lte = 7,
    Plus = 8,
    Minus = 9,
    And = 10,
    Or = 11,
    Noop = 12
}
declare type InterfaceDeclaration = {
    type: 'interfaceDeclaration';
    data: {
        identifier: string;
        typeParameters: JSType[];
        objectType: ObjectType;
    };
};
declare type TypeAliasDeclaration = {
    type: 'typeAliasDeclaration';
    data: {
        identifier: string;
        typeParameters: JSType[];
        type: JSType;
    };
};
export declare type JSType = {
    type: 'LiteralType';
    data: string;
} | {
    type: 'UnionType';
    data: JSType[];
} | {
    type: 'TypeReference';
    data: TypeReference;
} | {
    type: 'ObjectType';
    data: ObjectType;
} | {
    type: 'TupleType';
    data: JSType[];
};
export declare type ObjectType = {
    members: TypeMember[];
};
export declare type TypeReference = {
    name: string;
    arguments: JSType[];
};
declare type TypeMember = {
    type: 'PropertySignature';
    data: PropertySignature;
};
declare type PropertySignature = {
    name: string;
    type?: JSType;
};
declare type ImportDeclaration = {
    source: string;
    specifiers: {
        type: 'ImportSpecifier';
        data: ImportSpecifier;
    }[];
};
declare type ImportSpecifier = {
    imported: string;
    local?: string;
};
declare type ClassDeclaration = {
    id: string;
    superClass?: string;
    body: JSNode[];
};
declare type MethodDefinition = {
    key: string;
    value: JSNode;
};
declare type FunctionExpression = {
    id?: string;
    params: JSNode[];
    body: JSNode[];
};
declare type CallExpression = {
    callee: JSNode;
    arguments: JSNode[];
};
declare type MemberExpression = {
    memberName: string;
    expression: JSNode;
};
declare type JSXAttribute = {
    name: string;
    value: JSNode;
};
declare type JSXElement = {
    tag: string;
    attributes: JSNode[];
    content: JSNode[];
};
declare type AssignmentExpression = {
    left: JSNode;
    right: JSNode;
};
declare type BinaryExpression = {
    left: JSNode;
    operator: binaryOperator;
    right: JSNode;
};
declare type UnaryExpression = {
    prefix: boolean;
    operator: string;
    argument: JSNode;
};
declare type IfStatement = {
    test: JSNode;
    consequent: JSNode[];
    alternate: JSNode[];
};
declare type WhileStatement = {
    test: JSNode;
    body: JSNode[];
};
declare type ConditionalExpression = {
    test: JSNode;
    consequent: JSNode;
    alternate: JSNode;
};
declare type Property = {
    key: JSNode;
    value?: JSNode;
};
declare type LineEndComment = {
    comment: string;
    line: JSNode;
};
export declare type Literal = {
    type: 'Null';
    data: undefined;
} | {
    type: 'Undefined';
    data: undefined;
} | {
    type: 'Boolean';
    data: boolean;
} | {
    type: 'Number';
    data: number;
} | {
    type: 'String';
    data: string;
} | {
    type: 'Color';
    data: string;
} | {
    type: 'Image';
    data: string;
} | {
    type: 'Array';
    data: JSNode[];
} | {
    type: 'Object';
    data: JSNode[];
};
export declare type JSNode = {
    type: 'InterfaceDeclaration';
    data: InterfaceDeclaration;
} | {
    type: 'TypeAliasDeclaration';
    data: TypeAliasDeclaration;
} | {
    type: 'Return';
    data: JSNode;
} | {
    type: 'Literal';
    data: Literal;
} | {
    type: 'Identifier';
    data: string[];
} | {
    type: 'ImportDeclaration';
    data: ImportDeclaration;
} | {
    type: 'ClassDeclaration';
    data: ClassDeclaration;
} | {
    type: 'MethodDefinition';
    data: MethodDefinition;
} | {
    type: 'FunctionExpression';
    data: FunctionExpression;
} | {
    type: 'ArrowFunctionExpression';
    data: FunctionExpression;
} | {
    type: 'CallExpression';
    data: CallExpression;
} | {
    type: 'MemberExpression';
    data: MemberExpression;
} | {
    type: 'JSXAttribute';
    data: JSXAttribute;
} | {
    type: 'JSXElement';
    data: JSXElement;
} | {
    type: 'JSXExpressionContainer';
    data: JSNode;
} | {
    type: 'JSXSpreadAttribute';
    data: JSNode;
} | {
    type: 'SpreadElement';
    data: JSNode;
} | {
    type: 'VariableDeclaration';
    data: JSNode;
} | {
    type: 'AssignmentExpression';
    data: AssignmentExpression;
} | {
    type: 'BinaryExpression';
    data: BinaryExpression;
} | {
    type: 'UnaryExpression';
    data: UnaryExpression;
} | {
    type: 'IfStatement';
    data: IfStatement;
} | {
    type: 'WhileStatement';
    data: WhileStatement;
} | {
    type: 'ConditionalExpression';
    data: ConditionalExpression;
} | {
    type: 'Property';
    data: Property;
} | {
    type: 'ExportNamedDeclaration';
    data: {
        type: 'AssignmentExpression';
        data: AssignmentExpression;
    };
} | {
    type: 'Program';
    data: JSNode[];
} | {
    type: 'LineEndComment';
    data: LineEndComment;
} | {
    type: 'Empty';
} | {
    type: 'Unknown';
};
export {};
