"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
const lodash_upperfirst_1 = __importDefault(require("lodash.upperfirst"));
const lodash_camelcase_1 = __importDefault(require("lodash.camelcase"));
const convert_logic_1 = __importDefault(require("./convert-logic"));
const render_ast_1 = __importDefault(require("./render-ast"));
exports.format = 'swift';
exports.parseFile = (filePath, helpers, options) => __awaiter(void 0, void 0, void 0, function* () {
    let swiftAST;
    const logicNode = helpers.config.logicFiles[filePath];
    if (logicNode) {
        if (logicNode.type !== 'topLevelDeclarations' ||
            !logicNode.data.declarations.length) {
            return '';
        }
        swiftAST = convert_logic_1.default(logicNode, helpers);
    }
    if (!swiftAST) {
        return '';
    }
    // only output file if we passed an output option
    const outputFile = typeof options['output'] !== 'undefined' ? helpers.fs.writeFile : undefined;
    return `import Foundation

#if os(iOS) || os(tvOS) || os(watchOS)
  import UIKit
#elseif os(macOS)
  import AppKit
#endif

${render_ast_1.default(swiftAST, { outputFile, reporter: helpers.reporter })}`;
});
exports.parseWorkspace = (workspacePath, helpers, options) => __awaiter(void 0, void 0, void 0, function* () {
    yield Promise.all(helpers.config.logicPaths
        .concat(helpers.config.documentPaths)
        .map((filePath) => __awaiter(void 0, void 0, void 0, function* () {
        const swiftContent = yield exports.parseFile(filePath, helpers, options);
        if (!swiftContent) {
            return;
        }
        const name = lodash_upperfirst_1.default(lodash_camelcase_1.default(path.basename(filePath, path.extname(filePath))));
        const outputPath = path.join(path.dirname(filePath), `${name}.swift`);
        yield helpers.fs.writeFile(outputPath, swiftContent);
    })));
    yield helpers.fs.copyDir(path.join(__dirname, '../../../static/swift'), './lona-helpers');
});
