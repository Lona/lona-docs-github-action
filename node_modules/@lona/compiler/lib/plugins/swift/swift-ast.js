"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AccessLevelModifier;
(function (AccessLevelModifier) {
    AccessLevelModifier["PrivateModifier"] = "PrivateModifier";
    AccessLevelModifier["FileprivateModifier"] = "FileprivateModifier";
    AccessLevelModifier["InternalModifier"] = "InternalModifier";
    AccessLevelModifier["PublicModifier"] = "PublicModifier";
    AccessLevelModifier["OpenModifier"] = "OpenModifier";
})(AccessLevelModifier || (AccessLevelModifier = {}));
var MutationModifier;
(function (MutationModifier) {
    MutationModifier["MutatingModifier"] = "MutatingModifier";
    MutationModifier["NonmutatingModifier"] = "NonmutatingModifier";
})(MutationModifier || (MutationModifier = {}));
var OtherModifier;
(function (OtherModifier) {
    OtherModifier["ClassModifier"] = "ClassModifier";
    OtherModifier["ConvenienceModifier"] = "ConvenienceModifier";
    OtherModifier["DynamicModifier"] = "DynamicModifier";
    OtherModifier["FinalModifier"] = "FinalModifier";
    OtherModifier["InfixModifier"] = "InfixModifier";
    OtherModifier["LazyModifier"] = "LazyModifier";
    OtherModifier["OptionalModifier"] = "OptionalModifier";
    OtherModifier["OverrideModifier"] = "OverrideModifier";
    OtherModifier["PostfixModifier"] = "PostfixModifier";
    OtherModifier["PrefixModifier"] = "PrefixModifier";
    OtherModifier["RequiredModifier"] = "RequiredModifier";
    OtherModifier["StaticModifier"] = "StaticModifier";
    OtherModifier["UnownedModifier"] = "UnownedModifier";
    OtherModifier["UnownedSafeModifier"] = "UnownedSafeModifier";
    OtherModifier["UnownedUnsafeModifier"] = "UnownedUnsafeModifier";
    OtherModifier["WeakModifier"] = "WeakModifier";
})(OtherModifier || (OtherModifier = {}));
exports.DeclarationModifier = Object.assign(Object.assign(Object.assign({}, AccessLevelModifier), MutationModifier), OtherModifier);
// /* Ast builders for convenience, agnostic to the kind of data they use */
// module Builders = {
//   let memberExpression = (list: list(string)): node =>
//     switch (list) {
//     | [item] => SwiftIdentifier(item)
//     | _ => MemberExpression(list |> List.map(item => SwiftIdentifier(item)))
//     };
//   let functionCall =
//       (
//         name: list(string),
//         arguments: list((option(string), list(string))),
//       )
//       : node =>
//     FunctionCallExpression({
//       "name": memberExpression(name),
//       "arguments":
//         arguments
//         |> List.map(((label, expr)) =>
//              FunctionCallArgument({
//                "name":
//                  switch (label) {
//                  | Some(value) => Some(SwiftIdentifier(value))
//                  | None => None
//                  },
//                "value": memberExpression(expr),
//              })
//            ),
//     });
//   let privateVariableDeclaration =
//       (name: string, annotation: option(typeAnnotation), init: option(node)) =>
//     VariableDeclaration({
//       "modifiers": [AccessLevelModifier(PrivateModifier)],
//       "pattern":
//         IdentifierPattern({
//           "identifier": SwiftIdentifier(name),
//           "annotation": annotation,
//         }),
//       "init": init,
//       "block": None,
//     });
//   let publicVariableDeclaration =
//       (name: string, annotation: option(typeAnnotation), init: option(node)) =>
//     VariableDeclaration({
//       "modifiers": [AccessLevelModifier(PublicModifier)],
//       "pattern":
//         IdentifierPattern({
//           "identifier": SwiftIdentifier(name),
//           "annotation": annotation,
//         }),
//       "init": init,
//       "block": None,
//     });
//   let convenienceInit = (body: list(node)): node =>
//     InitializerDeclaration({
//       "modifiers": [
//         AccessLevelModifier(PublicModifier),
//         ConvenienceModifier,
//       ],
//       "parameters": [],
//       "failable": None,
//       "throws": false,
//       "body": body,
//     });
//   let memberOrSelfExpression = (firstIdentifier, statements) =>
//     switch (firstIdentifier) {
//     | "self" => MemberExpression(statements)
//     | _ => MemberExpression([SwiftIdentifier(firstIdentifier)] @ statements)
//     };
// };
// /* Fixes reason complication where field names weren't importing from this module */
// let makeTupleElement =
//     (elementName: option(string), annotation: typeAnnotation) => {
//   elementName,
//   annotation,
// };
