"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
const convert_1 = require("./convert");
const utils_1 = require("./utils");
exports.format = 'documentation';
exports.parseFile = (filePath, helpers) => __awaiter(void 0, void 0, void 0, function* () {
    const documentNode = helpers.config.componentFiles[filePath];
    if (!documentNode) {
        throw new Error(`${filePath} is not a documentation file`);
    }
    const name = path.basename(filePath, path.extname(filePath));
    const outputPath = path.join(path.dirname(filePath), `${name}.mdx`);
    const value = {
        mdxString: convert_1.convert(documentNode, helpers),
        children: utils_1.findChildPages(documentNode),
    };
    const file = {
        inputPath: filePath,
        outputPath,
        name,
        contents: {
            type: 'documentationPage',
            value,
        },
    };
    return file;
});
exports.parseWorkspace = (workspacePath, helpers, options) => __awaiter(void 0, void 0, void 0, function* () {
    let workspace;
    if (!helpers.evaluationContext) {
        helpers.reporter.warn('Failed to evaluate workspace.');
        workspace = { flatTokensSchemaVersion: '0.0.1', files: [] };
    }
    else {
        workspace = {
            files: yield Promise.all(helpers.config.logicPaths
                .concat(helpers.config.documentPaths)
                .map(x => exports.parseFile(x, helpers))),
            flatTokensSchemaVersion: '0.0.1',
        };
    }
    if (!options.output) {
        return workspace;
    }
    yield helpers.fs.writeFile('docs.json', JSON.stringify(workspace, null, '  '));
});
