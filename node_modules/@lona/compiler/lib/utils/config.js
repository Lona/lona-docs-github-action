"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
const fs = __importStar(require("fs"));
const serialization = __importStar(require("@lona/serialization"));
const fileSearch = __importStar(require("./file-search"));
function load(workspacePath, options) {
    return __awaiter(this, void 0, void 0, function* () {
        const lonaFile = JSON.parse(yield fs.promises.readFile(path.join(workspacePath, 'lona.json'), 'utf-8'));
        if (!lonaFile.ignore) {
            lonaFile.ignore = ['**/node_modules/**', '**/.git/**'];
        }
        const componentPaths = fileSearch.sync(workspacePath, '**/*.component', lonaFile);
        const documentPaths = fileSearch.sync(workspacePath, '**/*.md', lonaFile);
        const logicPaths = fileSearch.sync(workspacePath, '**/*.logic', lonaFile);
        const logicFiles = {};
        const componentFiles = {};
        if (options && options.forEvaluation && options.fs) {
            const fs = options.fs;
            yield Promise.all(logicPaths
                .map(x => fs
                .readFile(x)
                .then(data => serialization.decodeLogic(data))
                .then(ast => {
                logicFiles[x] = ast;
            }))
                .concat(documentPaths.map(x => fs
                .readFile(x)
                .then(data => serialization.decodeDocument(data))
                .then(ast => {
                componentFiles[x] = ast;
                logicFiles[x] = serialization.extractProgramFromAST(ast);
            }))));
        }
        return Object.assign(Object.assign({}, lonaFile), { workspacePath,
            componentPaths,
            documentPaths,
            logicPaths,
            logicFiles,
            componentFiles, version: require('../../package.json').version });
    });
}
exports.load = load;
